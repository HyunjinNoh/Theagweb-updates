name: Deploy to EC2

# 워크플로우가 실행될 조건 설정
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: # 수동 배포 트리거 (GitHub UI에서 실행 가능)

# 환경변수 설정 (전체 워크플로우에서 사용)
env:
  NODE_VERSION: "20"
  FRONTEND_DIR: "frontend"
  BACKEND_DIR: "backend"

jobs:
  # 배포 작업 정의
  deploy:
    runs-on: ubuntu-latest # GitHub 제공 Ubuntu 러너 사용
    timeout-minutes: 10

    steps:
      # 1. 소스코드 체크아웃
      - name: 📥 Checkout code
        uses: actions/checkout@v4 # GitHub 저장소의 코드를 러너에 다운로드

      # 2. Node.js 환경 설정
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }} # 환경변수에서 버전 참조
          cache: "npm"
          cache-dependency-path: | # 캐시할 package-lock.json 파일들 지정
            ${{ env.FRONTEND_DIR }}/package-lock.json
            ${{ env.BACKEND_DIR }}/package-lock.json

      # 3. 의존성 검증 (빠른 체크)
      - name: 🔍 Verify dependencies
        run: |
          cd ${{ env.BACKEND_DIR }}  
          npm ci --dry-run  
          cd ../${{ env.FRONTEND_DIR }}  
          npm ci --dry-run

      # 4. EC2에 배포 실행
      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 480s
          script: |
            # 프로젝트 디렉토리로 이동
            PROJECT_DIR="/home/ec2-user/Theagweb-updates"
            cd $PROJECT_DIR

            echo "📥 Pulling latest code..."
            git pull origin main

            echo "🔧 Installing backend dependencies..."
            cd backend
            npm install # 안전하게 일단 ci 대신 install

            echo "🔧 Installing frontend dependencies..."
            cd ../frontend
            npm install # 안전하게 일단 ci 대신 install

            echo "🔨 Building frontend..."  
            npm run build  

            echo "📋 Copying build files to nginx serving folder..."
            sudo cp -r build/* /var/www/html/

            echo "🔃 Restart Server..."
            cd ../backend
            pm2 restart server.js
            sudo systemctl restart nginx

      # 5. 배포 실패 시 롤백
      - name: 🔄 Rollback on failure
        if: failure() # 이전 단계가 실패했을 때만 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            echo "❌ Deployment failed, starting rollback..."

            PROJECT_DIR="/home/ec2-user/Theagweb-updates"
            cd $PROJECT_DIR

            # Git으로 이전 커밋으로 되돌리기
            echo "🔄 Rolling back to previous commit..."
            git reset --hard HEAD~1

            # 백엔드 의존성 재설치
            echo "🔧 Reinstalling backend dependencies..."
            cd backend
            npm install

            # 프론트엔드 의존성 재설치 및 빌드
            echo "🔧 Reinstalling frontend dependencies and rebuilding..."
            cd ../frontend
            npm install
            npm run build

            # nginx 폴더에 빌드 파일 복사
            echo "📋 Copying rollback build files..."
            sudo cp -r build/* /var/www/html/

            # 서버 재시작
            echo "🔃 Restarting services after rollback..."
            cd ../backend
            pm2 restart server.js
            sudo systemctl restart nginx

            echo "✅ Rollback completed"
